{"remainingRequest":"/home/fox/Desktop/scorm-vue/node_modules/babel-loader/lib/index.js!/home/fox/Desktop/scorm-vue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/fox/Desktop/scorm-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/fox/Desktop/scorm-vue/src/components/Dashboard/Views/Maps/WorldMap.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/fox/Desktop/scorm-vue/src/components/Dashboard/Views/Maps/WorldMap.vue","mtime":1634562697000},{"path":"/home/fox/Desktop/scorm-vue/babel.config.js","mtime":1634562697000},{"path":"/home/fox/Desktop/scorm-vue/node_modules/cache-loader/dist/cjs.js","mtime":1652603422530},{"path":"/home/fox/Desktop/scorm-vue/node_modules/babel-loader/lib/index.js","mtime":1652603423614},{"path":"/home/fox/Desktop/scorm-vue/node_modules/cache-loader/dist/cjs.js","mtime":1652603422530},{"path":"/home/fox/Desktop/scorm-vue/node_modules/vue-loader/lib/index.js","mtime":1652603423826}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL2ZveC9EZXNrdG9wL3Njb3JtLXZ1ZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvci5qcyI7CmltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSAiL2hvbWUvZm94L0Rlc2t0b3Avc2Nvcm0tdnVlL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheS5qcyI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnZhbHVlcy5qcyI7CmltcG9ydCAnZDMnOwppbXBvcnQgKiBhcyBkMyBmcm9tICdkMyc7CmltcG9ydCAndG9wb2pzb24nOwppbXBvcnQgRGF0YU1hcCBmcm9tICdkYXRhbWFwcyc7CmltcG9ydCB7IHRocm90dGxlIH0gZnJvbSAic3JjL3V0aWwvdGhyb3R0bGUiOwpleHBvcnQgZGVmYXVsdCB7CiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGNvbG9yMTogJyNBQUFBQUEnLAogICAgICBjb2xvcjI6ICcjNDQ0NDQ0JywKICAgICAgaGlnaGxpZ2h0RmlsbENvbG9yOiAnIzY2NjE1QicsCiAgICAgIGhpZ2hsaWdodEJvcmRlckNvbG9yOiAnI2YxZjFmMScsCiAgICAgIG1hcERhdGE6IHsKICAgICAgICAnQVVTJzogNzYwLAogICAgICAgICdCUkEnOiA1NTAsCiAgICAgICAgJ0NBTic6IDEyMCwKICAgICAgICAnREVVJzogMTMwMCwKICAgICAgICAnRlJBJzogNTQwLAogICAgICAgICdHQlInOiA2OTAsCiAgICAgICAgJ0dFTyc6IDIwMCwKICAgICAgICAnSU5EJzogMjAwLAogICAgICAgICdST1UnOiA2MDAsCiAgICAgICAgJ1JVUyc6IDMwMCwKICAgICAgICAnVVNBJzogMjkyMAogICAgICB9CiAgICB9OwogIH0sCiAgbWV0aG9kczogewogICAgZ2VuZXJhdGVDb2xvcnM6IGZ1bmN0aW9uIGdlbmVyYXRlQ29sb3JzKGxlbmd0aCkgewogICAgICByZXR1cm4gZDMuc2NhbGVMaW5lYXIoKS5kb21haW4oWzAsIGxlbmd0aF0pLnJhbmdlKFt0aGlzLmNvbG9yMSwgdGhpcy5jb2xvcjJdKTsKICAgIH0sCiAgICBnZW5lcmF0ZU1hcENvbG9yczogZnVuY3Rpb24gZ2VuZXJhdGVNYXBDb2xvcnMoKSB7CiAgICAgIHZhciBtYXBEYXRhVmFsdWVzID0gT2JqZWN0LnZhbHVlcyh0aGlzLm1hcERhdGEpOwogICAgICB2YXIgbWF4VmFsID0gTWF0aC5tYXguYXBwbHkoTWF0aCwgX3RvQ29uc3VtYWJsZUFycmF5KG1hcERhdGFWYWx1ZXMpKTsKICAgICAgdmFyIGNvbG9ycyA9IHRoaXMuZ2VuZXJhdGVDb2xvcnMobWF4VmFsKTsKICAgICAgdmFyIG1hcERhdGEgPSB7fTsKICAgICAgdmFyIGZpbGxzID0gewogICAgICAgIGRlZmF1bHRGaWxsOiAiI2U0ZTRlNCIKICAgICAgfTsKCiAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzLm1hcERhdGEpIHsKICAgICAgICB2YXIgdmFsID0gdGhpcy5tYXBEYXRhW2tleV07CiAgICAgICAgZmlsbHNba2V5XSA9IGNvbG9ycyh2YWwpOwogICAgICAgIG1hcERhdGFba2V5XSA9IHsKICAgICAgICAgIGZpbGxLZXk6IGtleSwKICAgICAgICAgIHZhbHVlOiB2YWwKICAgICAgICB9OwogICAgICB9CgogICAgICByZXR1cm4gewogICAgICAgIG1hcERhdGE6IG1hcERhdGEsCiAgICAgICAgZmlsbHM6IGZpbGxzCiAgICAgIH07CiAgICB9LAogICAgaW5pdFZlY3Rvck1hcDogZnVuY3Rpb24gaW5pdFZlY3Rvck1hcCgpIHsKICAgICAgdmFyIF90aGlzJGdlbmVyYXRlTWFwQ29sbyA9IHRoaXMuZ2VuZXJhdGVNYXBDb2xvcnMoKSwKICAgICAgICAgIGZpbGxzID0gX3RoaXMkZ2VuZXJhdGVNYXBDb2xvLmZpbGxzLAogICAgICAgICAgbWFwRGF0YSA9IF90aGlzJGdlbmVyYXRlTWFwQ29sby5tYXBEYXRhOwoKICAgICAgdmFyIHdvcmxkTWFwID0gbmV3IERhdGFNYXAoewogICAgICAgIHNjb3BlOiAnd29ybGQnLAogICAgICAgIGVsZW1lbnQ6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJ3b3JsZE1hcCIpLAogICAgICAgIGZpbGxzOiBmaWxscywKICAgICAgICBkYXRhOiBtYXBEYXRhLAogICAgICAgIHJlc3BvbnNpdmU6IHRydWUsCiAgICAgICAgZ2VvZ3JhcGh5Q29uZmlnOiB7CiAgICAgICAgICBib3JkZXJXaWR0aDogMC41LAogICAgICAgICAgYm9yZGVyT3BhY2l0eTogMC44LAogICAgICAgICAgaGlnaGxpZ2h0RmlsbENvbG9yOiB0aGlzLmhpZ2hsaWdodEZpbGxDb2xvciwKICAgICAgICAgIGhpZ2hsaWdodEJvcmRlckNvbG9yOiB0aGlzLmhpZ2hsaWdodEJvcmRlckNvbG9yLAogICAgICAgICAgaGlnaGxpZ2h0Qm9yZGVyV2lkdGg6IDAuNSwKICAgICAgICAgIGhpZ2hsaWdodEJvcmRlck9wYWNpdHk6IDAuOAogICAgICAgIH0KICAgICAgfSk7CiAgICAgIHZhciByZXNpemVGdW5jID0gd29ybGRNYXAucmVzaXplLmJpbmQod29ybGRNYXApOwogICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZnVuY3Rpb24gKCkgewogICAgICAgIHRocm90dGxlKHJlc2l6ZUZ1bmMsIDQwKTsKICAgICAgfSwgZmFsc2UpOwogICAgfQogIH0sCiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKHJlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfdGhpcy5pbml0VmVjdG9yTWFwKCk7CgogICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0sIF9jYWxsZWUpOwogICAgfSkpKCk7CiAgfQp9Ow=="},{"version":3,"mappings":";;;;AAIA;AACA;AACA;AACA;AACA;AAEA;EACAA,IADA,kBACA;IACA;MACAC,iBADA;MAEAC,iBAFA;MAGAC,6BAHA;MAIAC,+BAJA;MAKAC;QACA,UADA;QAEA,UAFA;QAGA,UAHA;QAIA,WAJA;QAKA,UALA;QAMA,UANA;QAOA,UAPA;QAQA,UARA;QASA,UATA;QAUA,UAVA;QAWA;MAXA;IALA;EAmBA,CArBA;EAsBAC;IACAC,cADA,0BACAC,MADA,EACA;MACA,wBACAC,MADA,CACA,WADA,EAEAC,KAFA,CAEA,0BAFA;IAGA,CALA;IAMAC,iBANA,+BAMA;MACA;MACA;MACA;MACA;MACA;QACAC;MADA;;MAGA;QACA;QACAC;QACAR;UACAS,YADA;UAEAC;QAFA;MAIA;;MACA;QACAV,gBADA;QAEAQ;MAFA;IAIA,CA1BA;IA2BAG,aA3BA,2BA2BA;MACA;MAAA;MAAA;;MACA;QACAC,cADA;QAEAC,4CAFA;QAGAL,YAHA;QAIAb,aAJA;QAKAmB,gBALA;QAMAC;UACAC,gBADA;UAEAC,kBAFA;UAGAnB,2CAHA;UAIAC,+CAJA;UAKAmB,yBALA;UAMAC;QANA;MANA;MAeA;MACAC;QACAC;MACA,CAFA,EAEA,KAFA;IAGA;EAhDA,CAtBA;EAwEAC,OAxEA,qBAwEA;IAAA;;IAAA;MAAA;QAAA;UAAA;YAAA;cACA;;YADA;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA;EAEA;AA1EA","names":["data","color1","color2","highlightFillColor","highlightBorderColor","mapData","methods","generateColors","length","domain","range","generateMapColors","defaultFill","fills","fillKey","value","initVectorMap","scope","element","responsive","geographyConfig","borderWidth","borderOpacity","highlightBorderWidth","highlightBorderOpacity","window","throttle","mounted"],"sourceRoot":"src/components/Dashboard/Views/Maps","sources":["WorldMap.vue"],"sourcesContent":["<template>\n  <div id=\"worldMap\" style=\"height: 300px;\"></div>\n</template>\n<script>\n  import 'd3';\n  import * as d3 from 'd3';\n  import 'topojson';\n  import DataMap from 'datamaps'\n  import { throttle } from \"src/util/throttle\";\n\n  export default {\n    data() {\n      return {\n        color1: '#AAAAAA',\n        color2: '#444444',\n        highlightFillColor: '#66615B',\n        highlightBorderColor: '#f1f1f1',\n        mapData: {\n          'AUS': 760,\n          'BRA': 550,\n          'CAN': 120,\n          'DEU': 1300,\n          'FRA': 540,\n          'GBR': 690,\n          'GEO': 200,\n          'IND': 200,\n          'ROU': 600,\n          'RUS': 300,\n          'USA': 2920\n        }\n      }\n    },\n    methods: {\n      generateColors(length) {\n        return d3.scaleLinear()\n          .domain([0, length])\n          .range([this.color1, this.color2]);\n      },\n      generateMapColors() {\n        let mapDataValues = Object.values(this.mapData);\n        let maxVal = Math.max(...mapDataValues);\n        let colors = this.generateColors(maxVal);\n        let mapData = {};\n        let fills = {\n          defaultFill: \"#e4e4e4\",\n        };\n        for (let key in this.mapData) {\n          let val = this.mapData[key];\n          fills[key] = colors(val);\n          mapData[key] = {\n            fillKey: key,\n            value: val\n          };\n        }\n        return {\n          mapData,\n          fills\n        }\n      },\n      initVectorMap() {\n        let { fills, mapData } = this.generateMapColors();\n        let worldMap = new DataMap({\n          scope: 'world',\n          element: document.getElementById(\"worldMap\"),\n          fills,\n          data: mapData,\n          responsive: true,\n          geographyConfig: {\n            borderWidth: 0.5,\n            borderOpacity: 0.8,\n            highlightFillColor: this.highlightFillColor,\n            highlightBorderColor: this.highlightBorderColor,\n            highlightBorderWidth: 0.5,\n            highlightBorderOpacity: 0.8\n          },\n        });\n        let resizeFunc = worldMap.resize.bind(worldMap);\n        window.addEventListener('resize', () => {\n          throttle(resizeFunc, 40)\n        }, false);\n      }\n    },\n    async mounted() {\n      this.initVectorMap()\n    }\n  }\n</script>\n<style>\n</style>\n"]}]}